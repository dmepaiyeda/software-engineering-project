package com.com1028.myassignment;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;

import com.com1028.myassignment.dao.CustomerDAO;
import com.com1028.myassignment.dao.DAOFactory;
import com.com1028.myassignment.dao.PaymentDAO;

/**
* This class performs calculations with the use of the data from the SQL database.
* @author deborahmepaiyeda
*
*/

public class CalculateRevenues {
	
	/**
	 * This is the main method which makes the Payment, Customer
	 * Data Access Objects 
	 * @param args 
	 * @throws Exception
	 */
	
	public static void main(String[] args) throws Exception {
		
		//Local variables
		final String db_user = "root";
		final String db_password = "";
		final String db = "jdbc:mysql://localhost:3306/classicmodels?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
						
		PaymentDAO paymentDAO = null;
		CustomerDAO customerDAO = null;
		List<Payment> payments = null;
		List<Customer> customers = null;
		
		try {
			
			paymentDAO = DAOFactory.getPaymentDAO();
			customerDAO = DAOFactory.getCustomerDAO();

			paymentDAO.openConnection(db_user, db_password, db);
			customerDAO.openConnection(db_user, db_password, db);
			
			payments = paymentDAO.getPayments();
			customers = customerDAO.getCustomers();
			
		} 
		catch(Exception e) {
			e.printStackTrace();
		} 
		finally {
			if(paymentDAO != null) {
				paymentDAO.closeConnection();
			}
			if(customerDAO != null) {
				customerDAO.closeConnection();
			}
		}
		
		//Creating objects to store the results from each function.
		Hashtable<Integer, Double> revenueResult = calculateRevenue(payments, customers);
		
		Enumeration<Integer> eu = revenueResult.keys();
		
		//Prints revenue generated by each sales representative
		System.out.println("\n\nREVENUE GENERATED BY SALES REPRESENTATIVES:\n");
		System.out.println("Sales \nRepresentative	Revenue");
		System.out.println("________________________________");

		while(eu.hasMoreElements()) {
			int key = eu.nextElement();
			System.out.printf("%d		$%f\n",key, revenueResult.get(key));
		}
	 }
	
	
		/**
		 * This method calculates the total revenue generated by each sales representative 
		 * based on the orders from the customers they serve.
		 * @param payments The payments table.
		 * @param customers The customers table.
		 * @return Hashtable A hashtable of sales representative (as key) and revenue (as value)
		 */
	public static Hashtable<Integer, Double> calculateRevenue(List<Payment> payments, List<Customer> customers){
		Hashtable <Integer, Double> revenues = new Hashtable <Integer, Double> ();
		
		for(int i = 0; i<payments.size(); i++) {
			Payment payment = payments.get(i);
			for(int j = 0; j<customers.size(); j++) {
				Customer customer = customers.get(j);
				if(payment.getCustomerNumber() == customer.getCustomerNumber()) {
					int salesRepNum = customer.getSalesRepEmployeeNumber();
					if(revenues.containsKey(salesRepNum)) {
						double total = revenues.get(salesRepNum) + payment.getAmount();
						revenues.put(salesRepNum, Math.round(total*100.0)/100.0);
					}
					else {
						revenues.put(salesRepNum, payment.getAmount());						
					}
				}
			}
			
		}
			
		return revenues;
	}


}
